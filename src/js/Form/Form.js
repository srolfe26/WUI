/** 
@author     Stephen Nielsen (rolfe.nielsen@gmail.com)

@event  formupdate Fires when a field on the form changes. Passes (event, form, [field])

The WUI Form is a wrapper for Wui.FormField()s. The WUI Form extends some basic Wui Object 
functionality to work specifically for a form. For example, the each method of a Wui form
operates on all of the items in the form's items array, but can optionally only operate on
only those items which are of the Wui.FormField type.

Items can be pushed and spliced on a Wui form using the push and splice methods, but these
items will receive additional processing through the normFrmItem method which will apply
form properties if they're not already specified on the object (like label position and
enabled status).

FormFields can be defined in a couple of different ways in a form. The first way, is to use
the new operator (i.e. new Wui.Text({})), the other way is to declare an object containing an
ftype:

{ftype:'Wui.Text', [other properties...]}

Data can be set on a form by passing an object with keys matching the form's field names to 
the setData method. getData() works inverse to setData, but will return false rather than
an object if there is a validation problem on the form.  For information about validation, 
see Wui.FormField.validate().

Form items can be accessed by name using the getFrmItm() method.
*/
Wui.Form = function(args){
    $.extend(this,{
        /** Config to disable the entire form */ 
        disabled:       false,
        
        /**  Position of the label relative to the form fields that is generally applied unless
        specifically defined on a particular field. */
        labelPosition:  'top',

        /** A size (in pixels) for the label in its given relative position to the field - defaults defined in CSS */
        labelSize:      null
    }, args, {
        /** Flag for whether data on the form has been changed - set by the individual fields */
        formChanged:    false,
        
        /** DOM element of the form */
        el:             $('<div>').addClass('wui-form'),
        
        /** @private Array to store one or more errors when a form is validated */
        errors:         []
    });
    
    this.init();
};
Wui.Form.prototype = $.extend(new Wui.O(),{
    /** Blanks out the values of all form fields. Value of fields will be null*/
    clearData:  function(){ this.setData(); },

    /** Display errors generated by validating the form */
    dispErrors: function(){
                    var msg = '';
                    for(var e = 0; e < this.errors.length; e++) msg += this.errors[e] + '<br/>';
                    Wui.errRpt(msg,'Form Errors');
                },

    /**
    @param {function}   f               A function that gets called for each item of the form with the exception of Wui.Note objects.
    @param {boolean}    [blockNote]     If defined and true, items that do not inherit from Wui.FormField will not be processed.
    @param {boolean}    [ascending]     Whether the loop happens in ascending or descending order. Defaults to true.
    @return true
    The passed in function gets called with two parameters the item, and the item's index.
    */
    each:       function(f, blockNote,ascending){
                    return Wui.O.prototype.each.call(
                        this,
                        function(itm,i){
                            if(!(blockNote && !(itm instanceof Wui.FormField))) return f(itm,i);
                        },
                        ascending
                    );
                },

    /** Class to hilight form fields when they fail validation */
    errCls:        'wui-form-err',

    /**
    @return Object containing the data of the form fields, or false if there was a validation error
    Performs validation on the form and returns either the form data or false. */
    getData:    function(){
                    if(this.validate()) { return this.getRawData(); }
                    else                { this.dispErrors(); return false; }
                },

    /**
    @param {string} fieldname name of the desired field.
    @return Value of the field
    Returns a form item's value - does not perform validation. */
    getField:   function(fieldname){
                    var retval = null;
                    this.each(function(itm){ if(itm.name == fieldname) retval = itm.val(); });
                    return retval;
                },
    
    /**
    @param {string} fieldname name of the desired field.
    @return Form item, not the DOM element, but the item in memory
    Returns a form item. */
    getFrmItm:  function(fieldname){
                    var retItm;
                    
                    this.each(function(itm) { 
                        if (itm.name == fieldname) {
                            retItm = itm;
                        }
                    });
                    
                    return retItm;
                },
                
    /**
    @return Object containing the data of the form fields
    Gets the values of form fields without performing validation */
    getRawData: function(){
                    var ret = {};
                    this.each(function(itm){ ret[itm.name] = itm.val(); }, true);
                    return ret;
                },
                
    /** Method that will run immediately when the object is constructed. */           
    init:       function(){},
                
    /**
    @param    {object|Wui.FrmField}    itm    Object to be added to a form
    @return Object with form attributes applied.
    Passed in items should either be Wui.FormField's which will have some of the form's attributes applied to them,
    or they will be objects containing an 'ftype' which is a string specifying a constructor.  The
    object will then be constructed and have form attributes applied. */
    normFrmItem:function(itm){
                    var me = this;

                    // If a form is disabled, the field needs to be disabled too
                    if(!(itm.disabled && itm.disabled === true)) $.extend(itm,{disabled: me.disabled});

                    if(!itm.hasOwnProperty('labelPosition')) $.extend(itm,{labelPosition: me.labelPosition});

                    if(itm.ftype && !(itm instanceof Wui.FormField)){                        
                        var ft = itm.ftype.split('.');

                        itm.labelSize = itm.labelSize || me.labelSize;

                        switch (ft.length) {
                            case 1:
                                if(window[ft[0]])   return new window[ft[0]](itm);
                                else                throw('Object type ' +itm.ftype+ ' is not defined.');
                            break;
                            case 2:
                                if(window[ft[0]] && window[ft[0]][ft[1]])   return new window[ft[0]][ft[1]](itm);
                                else                                        throw('Object type ' +itm.ftype+ ' is not defined.');
                            break;
                            case 3:
                                if(window[ft[0]] && window[ft[0]][ft[1]][ft[2]])    return new window[ft[0]][ft[1]][ft[2]](itm);
                                else                                                throw('Object type ' +itm.ftype+ ' is not defined.');
                            break;
                            case 4:
                                if(window[ft[0]] && window[ft[0]][ft[1]][ft[2]][ft[3]]) return new window[ft[0]][ft[1]][ft[2]][ft[3]](itm);
                                else                                                    throw('Object type ' +itm.ftype+ ' is not defined.');
                            break;
                            default:
                                throw('Object type ' +itm.ftype+ ' is not defined.');
                        }
                    }else if(itm instanceof Wui.FormField){
                        // If a field has a label, make it match the format of the form.
                        if(itm.lbl){
                            itm.labelSize = itm.labelSize || me.labelSize;
                            itm.lbl.setLabelPosition(itm.labelPosition || me.labelPosition);
                            itm.lbl.setLabelSize(itm.labelSize || me.labelSize);
                        }

                        return itm;
                    }else{
                        return itm;
                    }
                },
                
    /**
    @param {function} [after]    A function to be called after an object has been placed
    @return The object that was placed 
    Similar to the Wui.O.place() with the addition of constructing the forms items first. */
    place:      function(){
                    var me = this;
                    if(me.items === undefined) me.items = [];
                    me.each(function(itm,i){ me.items[i] = me.normFrmItem(itm); });
                    return Wui.O.prototype.place.apply(this,arguments);
                },
    
    /**
    @param {object} [obj,...] One or more objects to be added to the end of the parent object's items array
    @return The new length of the array 
    Similar to the Wui.O.push() with the addition of running normFrmItem() on the item first.
    */
    push:       function(){
                    var me = this, itms = [];
                    $.each(arguments,function(i,arg){ itms.push(me.normFrmItem(arg)); });
                    return Wui.O.prototype.push.apply(this,itms);
                },

    /**
    @param  {number}    idx         Position to start making changes in the items array.
    @param  {number}    howMany     Number of elements to remove.
    @param  {object}    [obj,...]   One or more objects to be added to the array at position idx
    @return An array of the removed objects, or an empty array. 
    Similar to the Wui.O.splice() with the addition of running normFrmItem().
    */
    splice:     function() {
                    var me = this, 
                        itms = [],
                        index = Array.prototype.shift.apply(arguments),
                        remove = Array.prototype.shift.apply(arguments);

                    // Create/normalize passed in objects
                    $.each(arguments,function(i,arg){ itms.push(me.normFrmItem(arg)); });

                    // Add Elements back in
                    itms.splice(0,0,index,remove);
                    return Wui.O.prototype.splice.apply(this,itms);
                },

    /**
    @param {string} fieldname The name of the field to be removed
    @return True
    Removes a form field from a form based on its name.
    */
    remFrmItm:  function(fieldname){
                    var me = this;
                    this.each(function(itm,idx){ if(itm.name == fieldname) Wui.O.prototype.splice.call(me,idx,1); });
                    return true;
                },
    
    /** Changes the state of whether the form has changed. Fires the 'formupdate' event if true. Gets set to false when
        the form is validated or when data is set on the form.
    @param {boolean} changed True if the form changed, false to reset that value.
    @param {object} changedItem The item that actually changed.
    @return The value of the changed 
    */
    formChange: function(changed,changedItem){
                    var me = this, dn = (me.name) ? '.' + me.name : '';
                    if(changed)
                        me.el.trigger($.Event('formupdate'), [me, changedItem])
                            .trigger($.Event('formupdate' + dn), [me, changedItem]);
                    me.formChanged = changed;
                    return me.formChanged;
                },
    
    
    /**
    @param {object}     [data]            A collection of data to be set on the form
    @param {boolean}    [fireEvents]    A boolean value that if set to false will suppress events. 
    Sets form fields with names matching keys in passed in data. If data is not defined all
    form values get set to null. 
    This method will fail unless the items of the form are initialized W formField objects
    */
    setData:    function(data,fireEvents){
                    if(data){
                                this.setData(); // Clears the data on the form before setting it
                                this.each(function(itm){ 
                                    if(data[itm.name]) 
                                        itm.val(data[itm.name],fireEvents);
                                }, true);
                            }
                    else    {    this.each(function(itm){ itm.val(null,fireEvents); }, true); }
                    this.formChange(false);
                },
    
    /** Disable all form fields */
    disable:    function(){ 
                    this.disabled = true; 
                    return this.each(function(itm){ itm.disable(); }, true); 
                },
    
    /** Enable all form fields */
    enable:     function(){ 
                    this.disabled = false; 
                    return this.each(function(itm){ itm.enable(); }, true); 
                },
    
    /**
    @param {string} fieldname The name of the field to set a value on
    @param {any} v    Value to set the field to.
    Sets a field of a given name to a given value.
    This method will fail unless the items of the form are initialized W formField objects
    */
    setField:   function(fieldname, v){
                    this.each(function(itm){ if(itm.name == fieldname) itm.val(v); }, true);
                },
    
    /**
    @param {string} err An error message.
    Adds a thrown error to the form's errrs array so that all errors on a form can be reported at once.
    */
    throwError: function(err){this.errors.push(err); return false;},
    
    /**
    Runs the validate() function for each of a form's fields.
    */
    validate:   function(){
                    var me = this;
                    me.errors = [];
                    me.each(function(itm){ 
                        if(typeof itm.el.toggleClass !== 'undefined')
                            itm.el.toggleClass(me.errCls,!itm.validate());
                    }, true);
                    this.formChange(false);
                    return (me.errors.length === 0);
                }
});